{"version":3,"sources":["serviceWorker.js","Card.js","Cardlist.js","Searchbox.js","Individual.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","name","id","email","onRouteChange","react_default","a","createElement","className","alt","src","concat","onClick","Cardlist","robots","map","user","index","src_Card","key","Searchbox","searchfield","onSearchChange","type","placeholder","onChange","Individual","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","assign","state","serachfield","target","value","console","log","route","_this2","fetch","then","response","json","users","_this3","filter","robot","toLowerCase","includes","src_Searchbox","src_Cardlist","href","src_Individual","Component","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.196d94e6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport 'tachyons';\r\nimport'./card.css';\r\n\r\nconst Card=({name, id, email,onRouteChange})=>{\r\n\r\nreturn(\r\n<div className=\"bg-light-yellow  ma2 pa4 br3 dib  tc\" id=\"card\">\r\n     <img alt=\"guy\" src={`https://robohash.org/${id}/?size=180x180`}/>\r\n      <div>\r\n          <h2> {name}</h2>\r\n          <p> {email}</p>\r\n      </div>\r\n      <button onClick={() => onRouteChange({id})}>More..</button>\r\n </div>      \r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card  from './Card';\r\n\r\nconst Cardlist=({robots,onRouteChange})=>\r\n{\r\n  return(\r\n        <div>\r\n              {\r\n\r\n           robots.map((user,index)=>\r\n                 {\r\n                 return(   \r\n                     <Card\r\n                       key = {index}\r\n                       id={robots[index].id} \r\n                       name={robots[index].name} \r\n                       email={robots[index].email}\r\n                       onRouteChange={onRouteChange}\r\n                     />\r\n                 \t   );\r\n                         }                \r\n\t                   )\r\n               }    \r\n         </div> \r\n         )          \r\n}\r\nexport default Cardlist;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst Searchbox=({searchfield,onSearchChange})=>{\r\n\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n             <input \r\n                className=\"pa3 b--orange bg-white tc\"\r\n                type=\"search\"\r\n                placeholder=\"Search By Name\"\r\n                onChange={onSearchChange}\r\n              />\r\n        </div>       \r\n\t\t  );\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\nimport './ind.css';\r\n\r\nconst Individual=({name, id, email,onRouteChange})=>{\r\n\r\nreturn(\r\n\t<div className='ind'>\r\n\t<h1 >{name}'s Blog</h1>\r\n     <img className='im'alt=\"guy\" src={`https://robohash.org/${id}/?size=180x180`}/>\r\n      <div>\r\n          <p> {email}</p>\r\n          <p id='title'>Title</p>\r\n      </div>\r\n      <div className='content'>\r\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam feugiat aliquet finibus.\r\n       Nullam congue felis ac convallis lacinia. Class aptent taciti sociosqu ad litora torquent\r\n        per conubia nostra, per inceptos himenaeos. Vestibulum nec elit auctor, gravida nulla eget,\r\n         congue enim. Suspendisse eu posuere arcu. Fusce ligula ex, faucibus maximus elit a, blandit faucibus augue\r\n         . Vivamus pretium, ante ac sodales pulvinar, quam metus eleifend leo, at dignissim sapien erat sit amet enim.\r\n          Sed ultrices blandit odio a interdum. Aliquam a odio diam. Praesent in enim lorem. Nullam hendrerit aliquet \r\n          justo, non hendrerit ex pretium in. Sed congue posuere turpis. Cras a risus ornare, mollis ipsum in, malesuada quam.\r\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam feugiat aliquet finibus.\r\n       Nullam congue felis ac convallis lacinia. Class aptent taciti sociosqu ad litora torquent\r\n        per conubia nostra, per inceptos himenaeos. Vestibulum nec elit auctor, gravida nulla eget,\r\n         congue enim. Suspendisse eu posuere arcu. Fusce ligula ex, faucibus maximus elit a, blandit faucibus augue\r\n         . Vivamus pretium, ante ac sodales pulvinar, quam metus eleifend leo, at dignissim sapien erat sit amet enim.\r\n          Sed ultrices blandit odio a interdum. Aliquam a odio diam. Praesent in enim lorem. Nullam hendrerit aliquet \r\n          justo, non hendrerit ex pretium in. Sed congue posuere turpis. Cras a risus ornare, mollis ipsum in, malesuada quam.\r\n\t\t</div>\r\n    \r\n </div>      \r\n\t);\r\n}\r\n\r\nexport default Individual;","import React,{Component} from'react';\r\nimport Cardlist from'./Cardlist';\r\nimport './app.css';\r\nimport Searchbox from'./Searchbox';\r\nimport Individual from'./Individual'; \r\n\r\n\r\nclass App extends Component \r\n{constructor() {\r\n     super()\r\n\tthis.state={\r\n\t\trobots:[],\r\n\t\tserachfield:'',\r\n\t\troute:0\r\n\t}\r\n}\r\nonSearchChange=(event)=>{\r\n\tthis.setState(Object.assign(this.state.serachfield,{serachfield:event.target.value}))\r\n\tconsole.log(this.state.route)\r\n}\r\nonRouteChange=(id)=>\r\n{\r\n\tconsole.log(id['id']);\r\n\tthis.setState(Object.assign(this.state.route,{route:id['id']}))\r\n}\r\ncomponentDidMount()\r\n  {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(users => this.setState(Object.assign(this.state.robots,{robots:users})));\r\n  }\r\nrender(){\r\n           const filter=this.state.robots.filter(robot=>\r\n           {\r\n\t           return robot.name.toLowerCase().includes(this.state.serachfield.toLowerCase());\r\n\t       } \r\n\t    )\r\n\t       return (\r\n\t       \t\t\tthis.state.route===0?\r\n\t       \t\t   <div className=\"tc\">  \r\n\t       \t\t    <header id=\"fixed\">\r\n\t\t        <h1 className=\"f0\"> ROBO-FRIENDS</h1>\r\n\t\t        <Searchbox onSearchChange={this.onSearchChange}/>\r\n\t\t        \t\t   </header>\r\n\t\t        <Cardlist robots={filter}\r\n\t\t        \t\t\tonRouteChange={this.onRouteChange}/>\r\n\t\t        <a href=\"https://shreyashgupta.github.io/Robots/\">go  back</a>\r\n \t\t        </div>:<Individual \r\n \t\t       \t\t\tkey = {this.state.route}\r\n                       id={this.state.robots[this.state.route-1].id} \r\n                       name={this.state.robots[this.state.route-1].name} \r\n                       email={this.state.robots[this.state.route-1].email}\r\n                       onRouteChange={this.onRouteChange}/>\r\n \t\t        )\r\n       ;}\r\n} \r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}